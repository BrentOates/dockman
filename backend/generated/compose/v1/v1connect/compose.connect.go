// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: compose/v1/compose.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/dockman/generated/compose/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ComposeServiceName is the fully-qualified name of the ComposeService service.
	ComposeServiceName = "compose.v1.ComposeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ComposeServiceCreateProcedure is the fully-qualified name of the ComposeService's Create RPC.
	ComposeServiceCreateProcedure = "/compose.v1.ComposeService/Create"
	// ComposeServiceListProcedure is the fully-qualified name of the ComposeService's List RPC.
	ComposeServiceListProcedure = "/compose.v1.ComposeService/List"
	// ComposeServiceDeleteProcedure is the fully-qualified name of the ComposeService's Delete RPC.
	ComposeServiceDeleteProcedure = "/compose.v1.ComposeService/Delete"
	// ComposeServiceRenameProcedure is the fully-qualified name of the ComposeService's Rename RPC.
	ComposeServiceRenameProcedure = "/compose.v1.ComposeService/Rename"
)

// ComposeServiceClient is a client for the compose.v1.ComposeService service.
type ComposeServiceClient interface {
	// root file management
	Create(context.Context, *connect.Request[v1.CreateFile]) (*connect.Response[v1.Empty], error)
	List(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error)
	Delete(context.Context, *connect.Request[v1.File]) (*connect.Response[v1.Empty], error)
	Rename(context.Context, *connect.Request[v1.RenameFile]) (*connect.Response[v1.Empty], error)
}

// NewComposeServiceClient constructs a client for the compose.v1.ComposeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewComposeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ComposeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	composeServiceMethods := v1.File_compose_v1_compose_proto.Services().ByName("ComposeService").Methods()
	return &composeServiceClient{
		create: connect.NewClient[v1.CreateFile, v1.Empty](
			httpClient,
			baseURL+ComposeServiceCreateProcedure,
			connect.WithSchema(composeServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.Empty, v1.ListResponse](
			httpClient,
			baseURL+ComposeServiceListProcedure,
			connect.WithSchema(composeServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.File, v1.Empty](
			httpClient,
			baseURL+ComposeServiceDeleteProcedure,
			connect.WithSchema(composeServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
		rename: connect.NewClient[v1.RenameFile, v1.Empty](
			httpClient,
			baseURL+ComposeServiceRenameProcedure,
			connect.WithSchema(composeServiceMethods.ByName("Rename")),
			connect.WithClientOptions(opts...),
		),
	}
}

// composeServiceClient implements ComposeServiceClient.
type composeServiceClient struct {
	create *connect.Client[v1.CreateFile, v1.Empty]
	list   *connect.Client[v1.Empty, v1.ListResponse]
	delete *connect.Client[v1.File, v1.Empty]
	rename *connect.Client[v1.RenameFile, v1.Empty]
}

// Create calls compose.v1.ComposeService.Create.
func (c *composeServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateFile]) (*connect.Response[v1.Empty], error) {
	return c.create.CallUnary(ctx, req)
}

// List calls compose.v1.ComposeService.List.
func (c *composeServiceClient) List(ctx context.Context, req *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Delete calls compose.v1.ComposeService.Delete.
func (c *composeServiceClient) Delete(ctx context.Context, req *connect.Request[v1.File]) (*connect.Response[v1.Empty], error) {
	return c.delete.CallUnary(ctx, req)
}

// Rename calls compose.v1.ComposeService.Rename.
func (c *composeServiceClient) Rename(ctx context.Context, req *connect.Request[v1.RenameFile]) (*connect.Response[v1.Empty], error) {
	return c.rename.CallUnary(ctx, req)
}

// ComposeServiceHandler is an implementation of the compose.v1.ComposeService service.
type ComposeServiceHandler interface {
	// root file management
	Create(context.Context, *connect.Request[v1.CreateFile]) (*connect.Response[v1.Empty], error)
	List(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error)
	Delete(context.Context, *connect.Request[v1.File]) (*connect.Response[v1.Empty], error)
	Rename(context.Context, *connect.Request[v1.RenameFile]) (*connect.Response[v1.Empty], error)
}

// NewComposeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewComposeServiceHandler(svc ComposeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	composeServiceMethods := v1.File_compose_v1_compose_proto.Services().ByName("ComposeService").Methods()
	composeServiceCreateHandler := connect.NewUnaryHandler(
		ComposeServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(composeServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	composeServiceListHandler := connect.NewUnaryHandler(
		ComposeServiceListProcedure,
		svc.List,
		connect.WithSchema(composeServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	composeServiceDeleteHandler := connect.NewUnaryHandler(
		ComposeServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(composeServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	composeServiceRenameHandler := connect.NewUnaryHandler(
		ComposeServiceRenameProcedure,
		svc.Rename,
		connect.WithSchema(composeServiceMethods.ByName("Rename")),
		connect.WithHandlerOptions(opts...),
	)
	return "/compose.v1.ComposeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ComposeServiceCreateProcedure:
			composeServiceCreateHandler.ServeHTTP(w, r)
		case ComposeServiceListProcedure:
			composeServiceListHandler.ServeHTTP(w, r)
		case ComposeServiceDeleteProcedure:
			composeServiceDeleteHandler.ServeHTTP(w, r)
		case ComposeServiceRenameProcedure:
			composeServiceRenameHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedComposeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedComposeServiceHandler struct{}

func (UnimplementedComposeServiceHandler) Create(context.Context, *connect.Request[v1.CreateFile]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("compose.v1.ComposeService.Create is not implemented"))
}

func (UnimplementedComposeServiceHandler) List(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("compose.v1.ComposeService.List is not implemented"))
}

func (UnimplementedComposeServiceHandler) Delete(context.Context, *connect.Request[v1.File]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("compose.v1.ComposeService.Delete is not implemented"))
}

func (UnimplementedComposeServiceHandler) Rename(context.Context, *connect.Request[v1.RenameFile]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("compose.v1.ComposeService.Rename is not implemented"))
}
