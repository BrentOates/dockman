// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: git/v1/git.proto

package gitrpc

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/dockman/generated/git/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GitServiceName is the fully-qualified name of the GitService service.
	GitServiceName = "git.v1.GitService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GitServiceListCommitsProcedure is the fully-qualified name of the GitService's ListCommits RPC.
	GitServiceListCommitsProcedure = "/git.v1.GitService/ListCommits"
	// GitServiceCommitProcedure is the fully-qualified name of the GitService's Commit RPC.
	GitServiceCommitProcedure = "/git.v1.GitService/Commit"
)

// GitServiceClient is a client for the git.v1.GitService service.
type GitServiceClient interface {
	ListCommits(context.Context, *connect.Request[v1.File]) (*connect.Response[v1.CommitList], error)
	Commit(context.Context, *connect.Request[v1.CommitQuery]) (*connect.Response[v1.Empty], error)
}

// NewGitServiceClient constructs a client for the git.v1.GitService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGitServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GitServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gitServiceMethods := v1.File_git_v1_git_proto.Services().ByName("GitService").Methods()
	return &gitServiceClient{
		listCommits: connect.NewClient[v1.File, v1.CommitList](
			httpClient,
			baseURL+GitServiceListCommitsProcedure,
			connect.WithSchema(gitServiceMethods.ByName("ListCommits")),
			connect.WithClientOptions(opts...),
		),
		commit: connect.NewClient[v1.CommitQuery, v1.Empty](
			httpClient,
			baseURL+GitServiceCommitProcedure,
			connect.WithSchema(gitServiceMethods.ByName("Commit")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gitServiceClient implements GitServiceClient.
type gitServiceClient struct {
	listCommits *connect.Client[v1.File, v1.CommitList]
	commit      *connect.Client[v1.CommitQuery, v1.Empty]
}

// ListCommits calls git.v1.GitService.ListCommits.
func (c *gitServiceClient) ListCommits(ctx context.Context, req *connect.Request[v1.File]) (*connect.Response[v1.CommitList], error) {
	return c.listCommits.CallUnary(ctx, req)
}

// Commit calls git.v1.GitService.Commit.
func (c *gitServiceClient) Commit(ctx context.Context, req *connect.Request[v1.CommitQuery]) (*connect.Response[v1.Empty], error) {
	return c.commit.CallUnary(ctx, req)
}

// GitServiceHandler is an implementation of the git.v1.GitService service.
type GitServiceHandler interface {
	ListCommits(context.Context, *connect.Request[v1.File]) (*connect.Response[v1.CommitList], error)
	Commit(context.Context, *connect.Request[v1.CommitQuery]) (*connect.Response[v1.Empty], error)
}

// NewGitServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGitServiceHandler(svc GitServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gitServiceMethods := v1.File_git_v1_git_proto.Services().ByName("GitService").Methods()
	gitServiceListCommitsHandler := connect.NewUnaryHandler(
		GitServiceListCommitsProcedure,
		svc.ListCommits,
		connect.WithSchema(gitServiceMethods.ByName("ListCommits")),
		connect.WithHandlerOptions(opts...),
	)
	gitServiceCommitHandler := connect.NewUnaryHandler(
		GitServiceCommitProcedure,
		svc.Commit,
		connect.WithSchema(gitServiceMethods.ByName("Commit")),
		connect.WithHandlerOptions(opts...),
	)
	return "/git.v1.GitService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GitServiceListCommitsProcedure:
			gitServiceListCommitsHandler.ServeHTTP(w, r)
		case GitServiceCommitProcedure:
			gitServiceCommitHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGitServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGitServiceHandler struct{}

func (UnimplementedGitServiceHandler) ListCommits(context.Context, *connect.Request[v1.File]) (*connect.Response[v1.CommitList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("git.v1.GitService.ListCommits is not implemented"))
}

func (UnimplementedGitServiceHandler) Commit(context.Context, *connect.Request[v1.CommitQuery]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("git.v1.GitService.Commit is not implemented"))
}
