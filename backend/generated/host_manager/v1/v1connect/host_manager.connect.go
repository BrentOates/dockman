// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: host_manager/v1/host_manager.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/dockman/generated/host_manager/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HostManagerServiceName is the fully-qualified name of the HostManagerService service.
	HostManagerServiceName = "host_manager.v1.HostManagerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HostManagerServiceListProcedure is the fully-qualified name of the HostManagerService's List RPC.
	HostManagerServiceListProcedure = "/host_manager.v1.HostManagerService/List"
	// HostManagerServiceSwitchClientProcedure is the fully-qualified name of the HostManagerService's
	// switchClient RPC.
	HostManagerServiceSwitchClientProcedure = "/host_manager.v1.HostManagerService/switchClient"
)

// HostManagerServiceClient is a client for the host_manager.v1.HostManagerService service.
type HostManagerServiceClient interface {
	List(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error)
	SwitchClient(context.Context, *connect.Request[v1.SwitchRequest]) (*connect.Response[v1.Empty], error)
}

// NewHostManagerServiceClient constructs a client for the host_manager.v1.HostManagerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHostManagerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HostManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	hostManagerServiceMethods := v1.File_host_manager_v1_host_manager_proto.Services().ByName("HostManagerService").Methods()
	return &hostManagerServiceClient{
		list: connect.NewClient[v1.Empty, v1.ListResponse](
			httpClient,
			baseURL+HostManagerServiceListProcedure,
			connect.WithSchema(hostManagerServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		switchClient: connect.NewClient[v1.SwitchRequest, v1.Empty](
			httpClient,
			baseURL+HostManagerServiceSwitchClientProcedure,
			connect.WithSchema(hostManagerServiceMethods.ByName("switchClient")),
			connect.WithClientOptions(opts...),
		),
	}
}

// hostManagerServiceClient implements HostManagerServiceClient.
type hostManagerServiceClient struct {
	list         *connect.Client[v1.Empty, v1.ListResponse]
	switchClient *connect.Client[v1.SwitchRequest, v1.Empty]
}

// List calls host_manager.v1.HostManagerService.List.
func (c *hostManagerServiceClient) List(ctx context.Context, req *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// SwitchClient calls host_manager.v1.HostManagerService.switchClient.
func (c *hostManagerServiceClient) SwitchClient(ctx context.Context, req *connect.Request[v1.SwitchRequest]) (*connect.Response[v1.Empty], error) {
	return c.switchClient.CallUnary(ctx, req)
}

// HostManagerServiceHandler is an implementation of the host_manager.v1.HostManagerService service.
type HostManagerServiceHandler interface {
	List(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error)
	SwitchClient(context.Context, *connect.Request[v1.SwitchRequest]) (*connect.Response[v1.Empty], error)
}

// NewHostManagerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHostManagerServiceHandler(svc HostManagerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	hostManagerServiceMethods := v1.File_host_manager_v1_host_manager_proto.Services().ByName("HostManagerService").Methods()
	hostManagerServiceListHandler := connect.NewUnaryHandler(
		HostManagerServiceListProcedure,
		svc.List,
		connect.WithSchema(hostManagerServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	hostManagerServiceSwitchClientHandler := connect.NewUnaryHandler(
		HostManagerServiceSwitchClientProcedure,
		svc.SwitchClient,
		connect.WithSchema(hostManagerServiceMethods.ByName("switchClient")),
		connect.WithHandlerOptions(opts...),
	)
	return "/host_manager.v1.HostManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HostManagerServiceListProcedure:
			hostManagerServiceListHandler.ServeHTTP(w, r)
		case HostManagerServiceSwitchClientProcedure:
			hostManagerServiceSwitchClientHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHostManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHostManagerServiceHandler struct{}

func (UnimplementedHostManagerServiceHandler) List(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("host_manager.v1.HostManagerService.List is not implemented"))
}

func (UnimplementedHostManagerServiceHandler) SwitchClient(context.Context, *connect.Request[v1.SwitchRequest]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("host_manager.v1.HostManagerService.switchClient is not implemented"))
}
