// @generated by protoc-gen-es v2.5.1 with parameter "target=ts"
// @generated from file git/v1/git.proto (package git.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file git/v1/git.proto.
 */
export const file_git_v1_git: GenFile = /*@__PURE__*/
  fileDesc("ChBnaXQvdjEvZ2l0LnByb3RvEgZnaXQudjEiBwoFRW1wdHkiOgoLQ29tbWl0UXVlcnkSGgoEZmlsZRgBIAEoCzIMLmdpdC52MS5GaWxlEg8KB21lc3NhZ2UYAiABKAkiLQoKQ29tbWl0TGlzdBIfCgdjb21taXRzGAEgAygLMg4uZ2l0LnYxLkNvbW1pdCJUCgZDb21taXQSDAoEaGFzaBgBIAEoCRIOCgZhdXRob3IYAiABKAkSDQoFZW1haWwYBCABKAkSDAoEd2hlbhgFIAEoCRIPCgdtZXNzYWdlGAYgASgJIhQKBEZpbGUSDAoEbmFtZRgBIAEoCTJvCgpHaXRTZXJ2aWNlEjEKC0xpc3RDb21taXRzEgwuZ2l0LnYxLkZpbGUaEi5naXQudjEuQ29tbWl0TGlzdCIAEi4KBkNvbW1pdBITLmdpdC52MS5Db21taXRRdWVyeRoNLmdpdC52MS5FbXB0eSIAQnoKCmNvbS5naXQudjFCCEdpdFByb3RvUAFaKWdpdGh1Yi5jb20vUkEzNDEvZG9ja21hbi9nZW5lcmF0ZWQvZ2l0L3YxogIDR1hYqgIGR2l0LlYxygIGR2l0XFYx4gISR2l0XFYxXEdQQk1ldGFkYXRh6gIHR2l0OjpWMWIGcHJvdG8z");

/**
 * @generated from message git.v1.Empty
 */
export type Empty = Message<"git.v1.Empty"> & {
};

/**
 * Describes the message git.v1.Empty.
 * Use `create(EmptySchema)` to create a new message.
 */
export const EmptySchema: GenMessage<Empty> = /*@__PURE__*/
  messageDesc(file_git_v1_git, 0);

/**
 * @generated from message git.v1.CommitQuery
 */
export type CommitQuery = Message<"git.v1.CommitQuery"> & {
  /**
   * @generated from field: git.v1.File file = 1;
   */
  file?: File;

  /**
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message git.v1.CommitQuery.
 * Use `create(CommitQuerySchema)` to create a new message.
 */
export const CommitQuerySchema: GenMessage<CommitQuery> = /*@__PURE__*/
  messageDesc(file_git_v1_git, 1);

/**
 * @generated from message git.v1.CommitList
 */
export type CommitList = Message<"git.v1.CommitList"> & {
  /**
   * @generated from field: repeated git.v1.Commit commits = 1;
   */
  commits: Commit[];
};

/**
 * Describes the message git.v1.CommitList.
 * Use `create(CommitListSchema)` to create a new message.
 */
export const CommitListSchema: GenMessage<CommitList> = /*@__PURE__*/
  messageDesc(file_git_v1_git, 2);

/**
 * @generated from message git.v1.Commit
 */
export type Commit = Message<"git.v1.Commit"> & {
  /**
   * @generated from field: string hash = 1;
   */
  hash: string;

  /**
   * @generated from field: string author = 2;
   */
  author: string;

  /**
   * @generated from field: string email = 4;
   */
  email: string;

  /**
   * @generated from field: string when = 5;
   */
  when: string;

  /**
   * @generated from field: string message = 6;
   */
  message: string;
};

/**
 * Describes the message git.v1.Commit.
 * Use `create(CommitSchema)` to create a new message.
 */
export const CommitSchema: GenMessage<Commit> = /*@__PURE__*/
  messageDesc(file_git_v1_git, 3);

/**
 * @generated from message git.v1.File
 */
export type File = Message<"git.v1.File"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message git.v1.File.
 * Use `create(FileSchema)` to create a new message.
 */
export const FileSchema: GenMessage<File> = /*@__PURE__*/
  messageDesc(file_git_v1_git, 4);

/**
 * @generated from service git.v1.GitService
 */
export const GitService: GenService<{
  /**
   * @generated from rpc git.v1.GitService.ListCommits
   */
  listCommits: {
    methodKind: "unary";
    input: typeof FileSchema;
    output: typeof CommitListSchema;
  },
  /**
   * @generated from rpc git.v1.GitService.Commit
   */
  commit: {
    methodKind: "unary";
    input: typeof CommitQuerySchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_git_v1_git, 0);

